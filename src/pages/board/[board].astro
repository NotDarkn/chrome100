---
import type {
  cros_brand,
  cros_recovery_image_db,
  cros_target,
} from "chrome-versions";
import { getRecoveryURL } from "chrome-versions";
import { getBrands, getRecoveryImages, getTarget } from "@lib/db";
import { type Shim, shimMirrors } from "@lib/shim";
import MainLayout from "@layouts/MainLayout.astro";
import { sortImages } from "@lib/sort";

const board = Astro.params.board;

let target: cros_target | undefined;
let images: cros_recovery_image_db[];
let brands: cros_brand[];

if (board) {
  target = getTarget.get(board) as cros_target | undefined;

  if (target) {
    images = getRecoveryImages.all(board) as cros_recovery_image_db[];
    brands = getBrands.all(board) as cros_brand[];
  }
}

const boardShims = shimMirrors
  .map(
    (mirror) =>
      [mirror.name, mirror.shims.find((shim) => shim.codename === board)] as [
        name: string,
        shim: Shim | undefined,
      ]
  )
  .filter((e) => e[1]) as [name: string, shim: Shim][];

const sortOrder = "lastModified";
const sortReverse = false;
---

<MainLayout>
  {
    target ? (
      <>
        <h1>
          Chrome OS board <code>{board}</code>
        </h1>
        <h2>RMA Shim</h2>
        <p>
          {boardShims.length ? (
            boardShims.map((e) => (
              <>
                <a href={e[1].url}>Download ({e[0]})</a>
                <br />
              </>
            ))
          ) : (
            <>
              No RMA shim was found for <code>{board}</code>.
              <br />
            </>
          )}
          Click <a href="/info#shim">here</a> for more information
        </p>
        <h2>Brands</h2>
        <ul>
          {brands.map((brand) => (
            <li>{brand.brand}</li>
          ))}
        </ul>
        <h2>Recovery Images</h2>
        <br />
        <h3>Boards</h3>
        {images.length ? (
          <table>
            <thead>
              <tr>
                <th>Platform</th>
                <th>Chrome</th>
                <th>Modified</th>
                <th />
              </tr>
            </thead>
            <tbody>
              {sortImages(sortOrder, sortReverse, images).map((img) => (
                <tr>
                  <td>{img.platform}</td>
                  <td>{img.chrome}</td>
                  <td>{img.last_modified}</td>
                  <td>
                    <a href={getRecoveryURL(img)}>Download</a>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p>
            No recovery images found. Either this board name has no images
            available or it has not been scraped yet.
          </p>
        )}
      </>
    ) : (
      <>Unknown board.</>
    )
  }
</MainLayout>
